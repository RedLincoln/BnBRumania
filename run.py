# Search methods

import search

print('#' * 15)
print('# A - B #')
print('#' * 15)
ab = search.GPSProblem('A', 'B', search.romania)
print("Busqueda en anchura")
finalNode = search.breadth_first_graph_search(ab)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Busqueda en profundid")
finalNode = search.depth_first_graph_search(ab)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Branch and Bound")
finalNode = search.bnb(ab)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Branch and Bound con subestimacion")
finalNode = search.bnb_subestimation(ab)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)

print('#' * 15)
print('# T - R #')
print('#' * 15)
tr = search.GPSProblem('T', 'R', search.romania)
print("Busqueda en anchura")
finalNode = search.breadth_first_graph_search(tr)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Busqueda en profundid")
finalNode = search.depth_first_graph_search(tr)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Branch and Bound")
finalNode = search.bnb(tr)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Branch and Bound con subestimacion")
finalNode = search.bnb_subestimation(tr)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)

print('#' * 15)
print('# O - D #')
print('#' * 15)
od = search.GPSProblem('O', 'D', search.romania)
print("Busqueda en anchura")
finalNode = search.breadth_first_graph_search(od)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Busqueda en profundid")
finalNode = search.depth_first_graph_search(od)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Branch and Bound")
finalNode = search.bnb(od)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)
print("Branch and Bound con subestimacion")
finalNode = search.bnb_subestimation(od)
print('{} {}'.format(finalNode.path(), finalNode.path_cost))
print('-' * 15)


# Result:
# [<Node B>, <Node P>, <Node R>, <Node S>, <Node A>] : 101 + 97 + 80 + 140 = 418
# [<Node B>, <Node F>, <Node S>, <Node A>] : 211 + 99 + 140 = 450
